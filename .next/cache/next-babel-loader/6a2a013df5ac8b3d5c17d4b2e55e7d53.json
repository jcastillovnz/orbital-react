{"ast":null,"code":"export default function preloadImages(srcs) {\n  console.log(\"preload entrie\", srcs);\n\n  function loadImage(src) {\n    return new Promise(function (resolve, reject) {\n      var img = new Image();\n\n      img.onload = function () {\n        resolve(img);\n      };\n\n      img.onerror = img.onabort = function () {\n        reject(src);\n      };\n\n      img.src = src;\n    });\n  }\n\n  var promises = [];\n\n  for (var i = 0; i < srcs.length; i++) {\n    promises.push(loadImage(srcs[i]));\n  }\n\n  var images = src;\n  return Promise.all(promises);\n}","map":{"version":3,"sources":["/home/jcastillo-vnz/orbital-react/pages/components/View360/Preload.tsx"],"names":["preloadImages","srcs","console","log","loadImage","src","Promise","resolve","reject","img","Image","onload","onerror","onabort","promises","i","length","push","images","all"],"mappings":"AAAA,eAAe,SAASA,aAAT,CAAuBC,IAAvB,EAA6B;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BF,IAA9B;;AACE,WAASG,SAAT,CAAmBC,GAAnB,EAAwB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAMC,GAAG,GAAG,IAAIC,KAAJ,EAAZ;;AACAD,MAAAA,GAAG,CAACE,MAAJ,GAAa,YAAW;AACtBJ,QAAAA,OAAO,CAACE,GAAD,CAAP;AACD,OAFD;;AAGAA,MAAAA,GAAG,CAACG,OAAJ,GAAcH,GAAG,CAACI,OAAJ,GAAc,YAAW;AACrCL,QAAAA,MAAM,CAACH,GAAD,CAAN;AACD,OAFD;;AAGAI,MAAAA,GAAG,CAACJ,GAAJ,GAAUA,GAAV;AACD,KATM,CAAP;AAUD;;AACD,MAAMS,QAAQ,GAAG,EAAjB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,IAAI,CAACe,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpCD,IAAAA,QAAQ,CAACG,IAAT,CAAcb,SAAS,CAACH,IAAI,CAACc,CAAD,CAAL,CAAvB;AACD;;AACD,MAAMG,MAAM,GAAGb,GAAf;AACA,SAAOC,OAAO,CAACa,GAAR,CAAYL,QAAZ,CAAP;AACD","sourcesContent":["export default function preloadImages(srcs) {\n  console.log(\"preload entrie\", srcs)\n    function loadImage(src) {\n      return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = function() {\n          resolve(img);\n        };\n        img.onerror = img.onabort = function() {\n          reject(src);\n        };\n        img.src = src;\n      });\n    }\n    const promises = [];\n    for (let i = 0; i < srcs.length; i++) {\n      promises.push(loadImage(srcs[i]));\n    }\n    const images = src \n    return Promise.all(promises);\n  }"]},"metadata":{},"sourceType":"module"}